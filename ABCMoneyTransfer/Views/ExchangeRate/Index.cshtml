@{
    ViewData["Title"] = "Exchange Rates Report";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Exchange Rates Report</h3>
        <button class="btn btn-outline-primary" id="exportBtn">
            <i class="bi bi-download"></i> Export CSV
        </button>
    </div>

    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="fromDate" class="form-label">From Date</label>
                    <input type="date" class="form-control" id="fromDate" />
                </div>
                <div class="col-md-3">
                    <label for="toDate" class="form-label">To Date</label>
                    <input type="date" class="form-control" id="toDate" />
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn custom-bg-dark text-white w-100" id="filterBtn">
                        <i class="bi bi-funnel"></i> Apply Filters
                    </button>
                </div>
                <div class="col-md-3">
                    <label for="searchInput" class="form-label">Search</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search currency..." />
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table id="exchangeRatesTable" class="table table-hover table-striped align-middle">
            <thead class="table-light">
                <tr>
                    <th class="sortable" data-sort="date">Date <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable" data-sort="iso">Currency Code <i class="bi bi-arrow-down-up"></i></th>
                    <th>Unit</th>
                    <th class="sortable" data-sort="currency">Currency Name <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable text-end" data-sort="buy">Buy Rate <i class="bi bi-arrow-down-up"></i></th>
                    <th class="sortable text-end" data-sort="sell">Sell Rate <i class="bi bi-arrow-down-up"></i></th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr>
                    <td colspan="6" class="text-center text-muted" id="noDataMessage">
                        No data available
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h5 class="mt-3">Loading Exchange Rates...</h5>
                <p class="text-muted mb-0">This may take a few moments</p>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function() {
    let currentData = [];
    let sortConfig = { column: 'date', direction: 'asc' };

    const initDates = () => {
        const today = new Date();
        const fromDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
        $('#fromDate').val(fromDate.toISOString().split('T')[0]);
        $('#toDate').val(today.toISOString().split('T')[0]);
    };

    const formatNumber = (num) =>
        Number(num).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 4 });

    const renderTable = (data) => {
        const tbody = $('#exchangeRatesTable tbody');
        tbody.empty();

        if (data.length === 0) {
            $('#noDataMessage').show();
            return;
        }

        $('#noDataMessage').hide();
        const fragment = document.createDocumentFragment();

        data.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.Date}</td>
                <td><span class="badge custom-bg-dark text-white">${item.Currency.Iso3}</span></td>
                <td>${item.Currency.Unit}</td>
                <td>${item.Currency.Name}</td>
                <td class="text-end text-success">${formatNumber(item.Buy)}</td>
                <td class="text-end text-danger">${formatNumber(item.Sell)}</td>
            `;
            fragment.appendChild(row);
        });

        tbody.append(fragment);
    };

        const sortData = (data, { column, direction }) => {
            return [...data].sort((a, b) => {
                const aValue = a[column];
                const bValue = b[column];

                if (column === 'date') {
                    return direction === 'asc'
                        ? new Date(aValue) - new Date(bValue)
                        : new Date(bValue) - new Date(aValue);
                }

                return direction === 'asc'
                    ? aValue.localeCompare(bValue)
                    : bValue.localeCompare(aValue);
            });
        };

        const fetchData = () => {
            $('#loadingModal').modal('show');

            $.ajax({
                url: "/ExchangeRate/GetExchangeReport",
                type: "GET",
                data: {
                    fromDate: $('#fromDate').val(),
                    toDate: $('#toDate').val()
                },
                success: (response) => {
                    const { Data: { Payload } } = JSON.parse(response.data);
                    currentData = Payload.flatMap(item =>
                        item.Rates.map(rate => ({
                            ...rate,
                            Date: item.Date,
                            Currency: rate.Currency
                        }))
                    );
                    renderTable(sortData(currentData, sortConfig));
                },
                error: (xhr) => {
                    console.error('Error:', xhr.responseText);
                    $('#noDataMessage').text('Error loading data').show();
                },
                complete: () => $('#loadingModal').modal('hide')
            });
        };

        $('.sortable').click(function() {
            const column = $(this).data('sort');
            sortConfig = {
                column,
                direction: sortConfig.column === column && sortConfig.direction === 'asc' ? 'desc' : 'asc'
            };
            $('.sortable i').removeClass('bi-arrow-up-short bi-arrow-down-short');
            $(this).find('i').addClass(`bi-arrow-${sortConfig.direction === 'asc' ? 'up' : 'down'}-short`);
            renderTable(sortData(currentData, sortConfig));
        });

        $('#searchInput').on('input', function() {
            const term = $(this).val().toLowerCase();
            const filtered = currentData.filter(item =>
                item.Currency.Name.toLowerCase().includes(term) ||
                item.Currency.Iso3.toLowerCase().includes(term)
            );
            renderTable(sortData(filtered, sortConfig));
        });

        $('#exportBtn').click(() => {
            const csvContent = "data:text/csv;charset=utf-8," +
                "Date,Currency Code,Unit,Currency Name,Buy Rate,Sell Rate\n" +
                currentData.map(item =>
                    `${item.Date},${item.Currency.Iso3},${item.Currency.Unit},"${item.Currency.Name}",${item.Buy},${item.Sell}`
                ).join("\n");

            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'exchange_rates.csv');
            document.body.appendChild(link);
            link.click();
        });

        initDates();
        $('#filterBtn').click(fetchData);
        $('#filterBtn').trigger('click');
    });
</script>

<style>
    .table-hover tbody tr:hover {
        background-color: rgba(13, 110, 253, 0.05);
        cursor: pointer;
    }

    .sortable {
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .sortable:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

    .badge {
        font-size: 0.85em;
        letter-spacing: 0.5px;
    }

    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
</style>